"SECRET_KEY" = "MxO\x9e\xa2[\xd3\x1e_\xaeB\x8as\x97\xf1\xaa~\x131\x9c\n\xcaq\x1d"
"JWT_SECRET" = "\xce\x92c\xc1\x80\xf7\xd3w\x8c\x99\\\xee]\xea\xd9\r~\x13\xd2\xca#w\x08\xb7"


client = pymongo.MongoClient("mongodb+srv://foodies_admin:<password>@foodies-first.teifg.mongodb.net/<dbname>?retryWrites=true&w=majority")
db = client.test

"""FOOD TRANSACTIONS CRUD"""
@app.route("/admin/create_meal", methods=['GET','POST'])
# @jwt_required
def create_meal():
    try:
        #allow only admin access
        if request.method == 'POST':
            meal = request.form.get('meal')
            price = request.form.get('price')
            

            if foods_db.find_one({'meal':meal}):
                return url_for('create_meal',error="Food already in database, Update instead")

            foods_db.insert_many({"meal":meal,"price":price,"description":desc})

            #flash food created message


            return render_template('get_meals.html')
        return render_template('get_meals.html')
    except:
        return redirect('create_meal',error="Unable to Create food")

@app.route("/meals",methods=['GET'])
def get_meals():
    # get meals from db
    try:
        data = foods.find()
        foods = [food for food in data]
        return render_template('meals.html',data=foods)
    except:
        return redirect(url_for('internal_server_error'))

@app.route("/admin/update_meal_price/<meal>", methods=["PUT","GET"])
@jwt_required
def update(meal):
    # update price in db
    try:
        if request.method == 'PUT':
            price = request.form.get('price')
            desc = request.form.get('description')

            if not foods_db.find_one({'meal':meal}):
                return url_for(f'admin/update_meal_price/{meal}',error="Food does not exist")

            #update db
            data = foods_db.update_one({"meal":meal},{"$set":{"price":price,"description":description}})
            
            #flash food updated successfully
            return redirect('/')
        data = foods_db.find_one({'meal':meal})
        return render_template('update_meal.html',data=data)
    except:
        return redirect(url_for('internal_server_error'))

@app.route("/admin/delete_meal/<meal>", methods=['DELETE'])
@jwt_required
def delete_meal(meal):
    # remove meal from db
    try:
        if not foods_db.find_one({'meal':meal}):
            return url_for(f'admin/update_meal_price/{meal}',error="Food does not exist") 

        foods_db.delete_one({'meal':meal})
        #flash food deleted successfully

        return redirect('/')
    except:
        return redirect(url_for("internal_server_error"))
